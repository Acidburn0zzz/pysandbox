Document "dangerous functions": functions allowing to override the sandbox policy
Write a learning tool

Major tasks
-----------

 * FIXME: ReadOnlyList(list('abc')) == list('abc') is False
 * Choose getModulePath() implementation (problem with "from encodings import
   aliases")
 * Python3: set/fix OBJECT_TYPES of proxy()
 * Python3: allow __subclasses__ attribute?
 * Write a test for traceback
 * interpreter.py has a quit() builtin function (instance of site.Quitter)
   which is not protected by a proxy
 * safe_import(): from_list default value is mutable
 * safe_open() should not use createReadOnlyObject(), but just hide the real
   type
 * Write a blacklist for ObjectProxy (eg. "__class__" attribute)
 * Write a whitelist of modifiable attributes in ObjectProxy?
   Problem of callback: have to be executed in the sandbox

Open questions
--------------

 * A function keeps its func_globals. Is it a problem?
 * A generator can be controled: .throw(), .send(), etc. Is it a problem if the
   generator was created outside the sandbox?
 * Move compile() builtin in its own feature (compile)?

Minor tasks
-----------

 * Allow function.func_code again?
 * Don't hide dict methods able to modify a dict (eg. dict.clear): need a
   builtin frozendict type
 * Write a cache for safe_import. Reuse sys.modules???
 * interpreter.py: import code module (InteractiveConsole) in the sandbox to
   execute the whole interpreter in the sandbox
 * Only instanciate each protection once?
 * Write a test using class.mro()?
 * __builtins__ can be redefined
 * isinstance(createReadOnlyList(...), list) is False
 * Write a whitelist for sys.path?
 * Clear sys.modules?
 * Improve type(open(...))(filename, "r") error message,
   see test_import_sys_stdout()

Todo later
----------

 * Check interaction with threads
 * Check interaction with signals, eg. SIGALARM and SIGTERM
   http://mail.python.org/pipermail/python-dev/2009-February/086425.html
 * Check for function importing modules:
   warnings imports modules
   > if there are other non-user-initiated dynamically imported modules?
   Grep the source for PyImport.
 * RuntimeError: maximum recursion depth exceeded
   import sys; sys.setrecursionlimit(50)
   http://mail.python.org/pipermail/python-dev/2009-February/086463.html
 * Limit memory usage

