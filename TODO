Major tasks
-----------

 * subprocess: disable site module (use -S)
 * Child process: disable the protection??
 * Test subprocess on Windows: no fork!
 * Test timeout on Windows
 * Implement memory limit on Windows
 * Implement the timeout in the parent process
 * Use a pipe, socket or something else instead of using stdin and stdout.
   Reuse subprocess and multiprocessing?
 * Set memory limit to 50 MB
 * Python3 support: fix proxy()
 * Document "dangerous functions": functions allowing to override the sandbox policy
 * Choose getModulePath() implementation (problem with "from encodings import
   aliases")
 * Clear sys.modules? Write a whitelist for sys.path and clear sys.meta_path?

Open questions
--------------

 * A function keeps its func_globals/__global__ attribute. Is it a problem?
 * A generator can be controled: .throw(), .send(), etc. Is it a problem if the
   generator was created outside the sandbox?

Minor tasks
-----------

 * Hide type.__bases__ on Python 2.5 or mark the attribute as read-only
 * isinstance(createReadOnlyList(...), list) is False
 * Write a test for traceback
 * interpreter.py has a quit() builtin function (instance of site.Quitter)
   which is not protected by a proxy
 * Write a blacklist for ObjectProxy (eg. "__class__" attribute)
 * Write a whitelist of modifiable attributes in ObjectProxy?
   Problem of callback: have to be executed in the sandbox
 * safe_open() should not use createReadOnlyObject(), but just hide the real
   type
 * Hide __file__ and __path__ attributes of modules and co_filename of code objects?
 * Write a tool generating a security policy (sandbox configuration)
 * Don't hide dict methods able to modify a dict (eg. dict.clear): need a
   builtin frozendict type. I proposed the PEP 416 to add a builtin frozendict type.
   http://www.python.org/dev/peps/pep-0416/
 * Write a cache for safe_import. Reuse sys.modules???
 * interpreter.py: import code module (InteractiveConsole) in the sandbox to
   execute the whole interpreter in the sandbox
 * Only instanciate each protection once?
 * Write a test using class.mro()?
 * Improve type(open(...))(filename, "r") error message,
   see test_import_sys_stdout()

Todo later
----------

 * Check interaction with threads
 * Check interaction with signals, eg. SIGALARM and SIGTERM
   http://mail.python.org/pipermail/python-dev/2009-February/086425.html
 * Check for function importing modules:
   warnings imports modules
   > if there are other non-user-initiated dynamically imported modules?
   Grep the source for PyImport.

