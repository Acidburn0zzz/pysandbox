Known issues
------------

 * Enable USE_CPYTHON_HACKS option?
 * "with" frame locals are not protected by the proxy (see above)

Major tasks
-----------

 * Python3:
   - fix proxy.py: Python3 has no builtin file type
   - fix proxy.py: Python3 has no types.ClassType nor types.InstanceType 
   - fix safe_open.py: open() doesn't accept buffering=None
   - fix builtins.py: Python3 has no __builtin__ module
 * Write a blacklist for ObjectProxy (eg. "__class__" attribute)
 * Write a whitelist of modifiable attributes in ObjectProxy?
   Problem of callback: have to be executed in the sandbox
 * Write a cache for safe_import. Reuse sys.modules???
 * Write a proxy for MethodWrapper: sys.stdout.__repr__

Open questions
--------------

 * Deny creation of an arbitray code object? type(lambda: 0), func.func_code,
   func.__code__, compile(), generator.gi_code, ...
 * Deny builtins: execfile?, reload?, input?, eval?
 * Remove/Warn about unsafe frame locals? Or if it's not possible, choose
   another syntax to avoid this problem.

   secret=42
   with Sandbox():
      print secret # should raise an error

   or

   with Sandbox() as sandbox:
      print sandbox # should raise an error

   Problem: in a function, locals have their "cache" using LOAD_FAST
   and STORE_FAST bytecodes. frame.f_locals is cached in frame.f_localsplus,
   but this cache is not accessible in Python.

Minor tasks
-----------

 * interpreter.py: site module introduces help() builtin,
   type(help) may leak
 * Improve type(open(...))(filename, "r") error message,
   see test_import_sys_stdout()

Todo later
----------

 * Check interaction with threads
 * Check interaction with signals, eg. SIGALARM and SIGTERM
   http://mail.python.org/pipermail/python-dev/2009-February/086425.html
 * Check for function importing modules:
   warnings imports modules
   > if there are other non-user-initiated dynamically imported modules?
   Grep the source for PyImport.
 * RuntimeError: maximum recursion depth exceeded
   import sys; sys.setrecursionlimit(50)
   http://mail.python.org/pipermail/python-dev/2009-February/086463.html
 * Fix "raise" in interpreter.py. Is it really a problem?
 * Limit CPU / memory usage

