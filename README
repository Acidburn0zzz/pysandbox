pysandbox is a Python sandbox. By default, untrusted code executed in the
sandbox cannot modify the environment (write a file, use print or import a
module). But you can configure the sandbox to choose exactly which features are
allowed or not, eg. import sys module and read file /etc/issue.

Website: http://github.com/haypo/pysandbox/


Status
======

pysanbox is under heavy development, and should not be used in production
applications.

pysanbox is tested on Python 2.5 and 2.6 on Debian Sid.

See TODO file for the complete status.


Blocked features
================

Features:

 * Read, write, or create a file
 * Import modules
 * Exit Python
 * Access stdin, stdout or stderr

Protection of the sandbox itself:

 * Read function closure
 * Read function globals
 * Read frame locals
 * Get type subclasses
 * __builtins__ is read only
 * Deny access to dict.__setitem__ and dict.__delitem__:
   use d[key]=value and del d[key] instead


Configuration
=============

Use SandboxConfig class to configure your sandbox. Features are the most simply
way to configure it.

Features
--------

 - "debug_sandbox": enable traceback on the sandbox itself
 - "exit": sys.exit() and raise SystemExit()
 - "help": pydoc.help(), use "import pydoc" outside the sandbox to use it
 - "interpreter": give access to stdio streams, enable traceback
 - "regex": compile regex, match regex, search regex, etc. (re module)
 - "site": allow to read the license file
 - "stdin", "stdout", "stderr": sys.stdin, sys.stdout and sys.stderr
 - "traceback": next calls to allowModule() will add the module filename to the
   open() whitelist, so Python can print a traceback

To enable a feature, use SandboxConfig('feature1', 'feature2', ...) or
config.enable('feature').

CPython restricted mode
-----------------------

Use SandboxConfig(cpython_restricted=True) to enable CPython restricted mode.
In this mode, reading a file and modify a class are blocked. Some attributes
are hidden (eg. method.__self__), other are read only (eg. func.__doc__).

CPython restricted mode is disabled by default. The restricted mode is
incompatible with SandboxConfig "traceback" feature and allowPath() method.

The restricted mode doesn't exist in Python3 anymore, it was removed with
bastion and rexec modules.

CPython restricted mode was removed in Python 3.0:
http://svn.python.org/view?view=rev&revision=55301

Other options
-------------

 - config.allowPath(path) allows to read a file from the specified path
 - config.allowModule(name, symbol1, symbol2, ...) allows to import the
   specified module, but give only access to the specified symbols


Example
=======

With call() method: ::

    from sandbox import Sandbox

    def func(a, b):
        return a + b

    sandbox = Sandbox()
    print sandbox.call(func, 1, 2)

With execute() method: ::

    from sandbox import Sandbox, SandboxConfig
    sandbox = Sandbox(SandboxConfig('stdout'))
    sandbox.execute('print("Code executed in the sandbox")')



See also
========

Python
------

 * http://wiki.python.org/moin/SandboxedPython
 * tav CPython patches:
   http://codereview.appspot.com/20051
   http://codereview.appspot.com/21043
 * secure*.py in plexnet
   http://github.com/tav/plexnet/tree/master/source/plexnet/util
 * Security in Python Wiki:
   http://wiki.python.org/moin/Security
 * safelite.py:
   http://tav.espians.com/a-challenge-to-break-python-security.html
 * Zope security:
   http://pypi.python.org/pypi/RestrictedPython
   http://svn.zope.org/zope.security/trunk/src/zope/security/
 * Python taint mode:
   http://www.cats-muvva.net/software/
 * Controlling Access to Resources Within The Python Interpreter:
   http://www.cs.ubc.ca/~drifty/papers/python_security.pdf
 * PyPy sandbox:
   http://codespeak.net/pypy/dist/pypy/doc/sandbox.html
 * mxProxy:
   http://www.egenix.com/products/python/mxBase/mxProxy/
 * Python 2.3: rexec and Bastion

Python-dev mailing list
-----------------------

 * "Python jail: whitelist vs blacklist"
   Victor Stinner, Tue Feb 24 13:50:40 CET 2009
   http://mail.python.org/pipermail/python-dev/2009-February/086444.html
 * "Challenge: Please break this!"
   tav, Mon Feb 23 23:41:30 CET 2009
   http://mail.python.org/pipermail/python-dev/2009-February/086401.html
   http://mail.python.org/pipermail/python-dev/2009-February/086413.html
   http://mail.python.org/pipermail/python-dev/2009-February/086439.html
 * "Reviving restricted mode?"
   Guido van Rossum, Sun Feb 22 17:45:27 CET 2009
   http://mail.python.org/pipermail/python-dev/2009-February/086352.html
 * "object capability; func_closure; __subclasses__"
   tav, Thu Jun 28 03:04:42 CEST 2007
   http://mail.python.org/pipermail/python-dev/2007-June/073724.html
 * "Capabilities"
   Guido van Rossum, Fri, 07 Mar 2003 12:41:16 -0500
   http://mail.python.org/pipermail/python-dev/2003-March/033820.html
   http://mail.python.org/pipermail/python-dev/2003-March/033854.html
   ...
   (read the whole archive of march and april 2003)

Other
-----

 * http://lua-users.org/wiki/SandBoxes
 * "Capability-based Financial Instruments"
   Mark S. Miller, Chip Morningstar and Bill Frantz, 2000
   http://www.erights.org/elib/capability/ode/index.html

